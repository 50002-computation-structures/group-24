module multiplier (
    input a[16],
    input b[16],
    output mul[16]
    ) {

    //how many full adders needed for  32 bit multiplier?
    // arith sum of 31
    fa fa [120];
    var i; //for the for loops
    var j; //for the for loops
    var current_row_fa_index;
    var previous_row_fa_index;


    always{
        //LSB out
        mul[0] = b[0] & a[0];

        //second row, 31 columns, AND gate input to the FAs

        for (i = 0; i < 15; i++) { //loop through the columns of the first row
            fa.a[i] = a[i] & b[1];
            fa.b[i] = a[i+1] & b[0];
            if (i ==0){
                fa.cin[i] = b0; //binary 0
            }
            else{
                // i = 1 onwards
                fa.cin[i] = fa.cout[i-1];

            }
        }

        //third row, 30 columns
        previous_row_fa_index = 0;
        current_row_fa_index = 15;

        //bit 1 out
        mul[1] = fa.s[previous_row_fa_index];

        for(i=2;i<15;i++) { // the row loop
            for(j=0;j<16-i;j++) { // the column loop
                fa.a[current_row_fa_index+j] = a[j] & b[i];
                fa.b[current_row_fa_index+j] = fa.s[previous_row_fa_index+1+j];

                if (j == 0) {
                    fa.cin[current_row_fa_index+j] = b0; // GND
                }
                else{
                    fa.cin[current_row_fa_index+j] = fa.cout[current_row_fa_index+j-1];
                }
            }

            //update the indexes
            previous_row_fa_index = current_row_fa_index;
            current_row_fa_index = current_row_fa_index + j;
            // set output

            mul[i] = fa.s[previous_row_fa_index];
        }

        fa.a[119] = a[0] & b[15];
        fa.b[119] = fa.s[118];
        fa.cin[119] = b0;
        mul[15] = fa.s[119];
    }
}