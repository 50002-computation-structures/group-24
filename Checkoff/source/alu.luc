module alu (
    input a[16],
    input b[16],
    input alufn_signal[6],
    output out[16],
    output z,
    output v,
    output n
  ) {
  adder adder;
  boolean boolean;
  shifter shifter;
  compare compare;
  multiplier multiplier;
  modulus modulus;
  
  sig z1, v1, n1, k[16], r[16], l[16];
  
  always
  {
    adder.a = a;
    adder.b = b;
    adder.alufn_signal = alufn_signal;
    
    z1 = adder.z;
    v1 = adder.v;
    n1 = adder.n;
    
    z = z1;
    v = v1;
    n = n1;
    
    //compare block
    compare.alufn_signal = alufn_signal;
    compare.z = z1;
    compare.v = v1;
    compare.n = n1;
    
    // boolean block
    boolean.alufn_signal = alufn_signal;
    boolean.a = a;
    boolean.b = b;
    
    // shifter block
    shifter.a = a;
    shifter.b = b[3:0];
    shifter.alufn_signal = alufn_signal;
    
    // multiplier
    multiplier.a = a;
    multiplier.b = b;
    
    // modulus
    modulus.a = a;
    modulus.b = b;
    r = 16b0;
    
    
    
    // case 00 select
    case(alufn_signal[2:1]){
      
      default: k = 16b0;
      b00: k = adder.out;
      b01: k = multiplier.mul;
      b10: k = modulus.out;
      b11: k = r;
    }
    
    // Selector
    case(alufn_signal[5:4]){
      default: l = 16b0;
      b00: l = k;
      b01: l = boolean.out;
      b10: l = shifter.out;
      b11: l = compare.out;
    }

    out = l;
  }
}