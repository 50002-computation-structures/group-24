module shifter(
    input a[16],
    input b[5],
    input alufn_signal[6],
    output out[16]
  ){
  x_bit_left_shifter left16(#SHIFT(16));
  x_bit_left_shifter left8(#SHIFT(8));
  x_bit_left_shifter left4(#SHIFT(4));
  x_bit_left_shifter left2(#SHIFT(2));
  x_bit_left_shifter left1(#SHIFT(1));
  x_bit_right_shifter right16(#SHIFT(16));
  x_bit_right_shifter right8(#SHIFT(8));
  x_bit_right_shifter right4(#SHIFT(4));
  x_bit_right_shifter right2(#SHIFT(2));
  x_bit_right_shifter right1(#SHIFT(1));
  x_bit_rightA_shifter rightA16(#SHIFT(16));
  x_bit_rightA_shifter rightA8(#SHIFT(8));
  x_bit_rightA_shifter rightA4(#SHIFT(4));
  x_bit_rightA_shifter rightA2(#SHIFT(2));
  x_bit_rightA_shifter rightA1(#SHIFT(1));
  sig tmp_a[16];
  sig pad;
  always {
    case(alufn_signal[1:0]){
      b00:
        pad = b0;
        tmp_a[15:0] = a[15:0];
        
        //shift left16
        case (b[4]) {
          b0:
            left16.pad = pad;
            left16.a = tmp_a;
            left16.shift = b0;
          default:
            left16.pad = pad;
            left16.a = tmp_a;
            left16.shift = b1;
        }
        case (b[3]) {
          b0:
            left8.pad=pad;
            left8.a = left16.out;
            left8.shift = b0;
          default:
            left8.pad=pad;
            left8.a = left16.out;
            left8.shift = b1;
        }
        case (b[2]) {
          b0:
            left4.pad=pad;
            left4.a = left8.out;
            left4.shift = b0;
          default:
            left4.pad=pad;
            left4.a = left8.out;
            left4.shift = b1;
        }
        
        case (b[1]) {
          b0:
            left2.pad=pad;
            left2.a = left4.out;
            left2.shift = b0;
          default:
            left2.pad=pad;
            left2.a = left4.out;
            left2.shift = b1;
        }
        
        case (b[0]) {
          b0:
            left1.pad=pad;
            left1.a = left2.out;
            left1.shift = b0;
            out = left1.out;
          default:
            left1.pad=pad;
            left1.a = left2.out;
            left1.shift = b1;
            out = left1.out;
        }
      b01:
        pad = b0;
        tmp_a[15:0] = a[15:0];
        
        //shift right16
        
        case (b[4]) {
          b0:
            right16.pad = pad;
            right16.a = tmp_a;
            right16.shift = b0;
          default:
            right16.pad = pad;
            right16.a = tmp_a;
            right16.shift = b1;
        }
        
        case (b[3]) {
          b0:
            right8.pad=pad;
            right8.a = right16.out;
            right8.shift = b0;
          default:
            right8.pad=pad;
            right8.a = right16.out;
            right8.shift = b1;
        }
        
        case (b[2]) {
          b0:
            right4.pad=pad;
            right4.a = right8.out;
            right4.shift = b0;
          default:
            right4.pad=pad;
            right4.a = right8.out;
            right4.shift = b1;
        }
        
        case (b[1]) {
          b0:
            right2.pad=pad;
            right2.a = right4.out;
            right2.shift = b0;
          default:
            right2.pad=pad;
            right2.a = right4.out;
            right2.shift = b1;
        }
        
        case (b[0]) {
          b0:
            right1.pad=pad;
            right1.a = right2.out;
            right1.shift = b0;
            out = right1.out;
          default:
            right1.pad=pad;
            right1.a = right2.out;
            right1.shift = b1;
            out = right1.out;
        }
      default:
        pad = a[15];
        tmp_a[15:0] = a[15:0];
        
        //shift right16
        
        case (b[4]) {
          b0:
            rightA16.pad = pad;
            rightA16.a = tmp_a;
            rightA16.shift = b0;
          default:
            rightA16.pad = pad;
            rightA16.a = tmp_a;
            rightA16.shift = b1;
        }
        
        case (b[3]) {
          b0:
            rightA8.pad=pad;
            rightA8.a = rightA16.out;
            rightA8.shift = b0;
          default:
            rightA8.pad=pad;
            rightA8.a = rightA16.out;
            rightA8.shift = b1;
        }
        
        case (b[2]) {
          b0:
            rightA4.pad=pad;
            rightA4.a = rightA8.out;
            rightA4.shift = b0;
          default:
            rightA4.pad=pad;
            rightA4.a = rightA8.out;
            rightA4.shift = b1;
        }
        
        case (b[1]) {
          b0:
            rightA2.pad=pad;
            rightA2.a = rightA4.out;
            rightA2.shift = b0;
          default:
            rightA2.pad=pad;
            rightA2.a = rightA4.out;
            rightA2.shift = b1;
        }
        
        case (b[0]) {
          b0:
            rightA1.pad=pad;
            rightA1.a = rightA2.out;
            rightA1.shift = b0;
            out = rightA1.out;
          default:
            rightA1.pad=pad;
            rightA1.a = rightA2.out;
            rightA1.shift = b1;
            out = rightA1.out;
        }
      
    }
}