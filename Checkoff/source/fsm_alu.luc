module fsm_alu (
    input clk, //clock
    input rst,  // reset
    input button[2],  
    input in[3][8], // get the input from the dip switch
    output alufn_address[6], // display what aluFN it is running currently
    output outLED[16], // alu output. to be shown in the io_leds
    output ledisplay[4][8] // seven segment display output
    
  ) {
  
  dff inputa[16](#INIT(0), .clk(clk), .rst(rst)); // store 16 bit input a
  dff inputb[16](#INIT(0), .clk(clk), .rst(rst)); // store 16 bit input b
  dff alufnreg[6](#INIT(0), .clk(clk), .rst(rst)); // store 6 bit alufn
  dff addressreg[6](#INIT(0), .clk(clk), .rst(rst)); //store 5 bit address (ROM)
  dff outputreg[16](#INIT(0), .clk(clk), .rst(rst)); // store 16 bit for output on led
  dff z[1](#INIT(0), .clk(clk), .rst(rst)); // store 1 bit z
  dff v[1](#INIT(0), .clk(clk), .rst(rst)); // store 1 bit v
  dff n[1](#INIT(0), .clk(clk), .rst(rst)); // store 1 bit n
  dff outputled[4][8](.clk(clk), .rst(rst)); // store what to display on 7 segment displays
  counter slowClock(#SIZE(1), #DIV(26), .clk(clk), .rst(rst));
  edge_detector slowClockEdge(#RISE(1), #FALL(0), .clk(clk));
  fsm states(.clk(clk)) = {HI, INPUTA, INPUTB, ALUFN, RESULT, ALUX, TEST, NEXT, SHOWA, SHOWB, SHOWALUFN, CHECK, PASS, FAIL}; // main fsm to get user inputs and display results

  
  alu alu; // call the alu.luc 
  rom rom; //call rom.luc
  
  // store all the aluFNs to check if there is an illegal aluFN when user input
  const ADD = 6b000000;
  const SUB = 6b000001;
  const MUL = 6b000010;
  const AND = 6b011000;
  const OR = 6b011110;
  const XOR = 6b010110;
  const A= 6b011010;
  const SHL = 6b100000;
  const SHR = 6b100001;
  const SRA = 6b100011;
  const CMPEQ = 6b110011;
  const CMPLT = 6b110101;
  const CMPLE = 6b110111;
  const MOD = 6b000100;
  
  always {

    alu.a = inputa.q;
    alu.b = inputb.q;
    alu.alufn_signal = alufnreg.q;
    rom.address = addressreg.q;
    outLED = outputreg.q;
    z.d = alu.n[0];
    v.d = alu.v[0];
    n.d = alu.z[0];
    ledisplay = outputled.q;
    slowClockEdge.in = slowClock.value;
 
    case (states.q) { 
      states.HI:
        outputreg.d = 0;
        addressreg.d = 6b0;
        alufnreg.d = 0; 
        alufn_address = 6b0;        
        if (button[1]) {
          if (in[0][0] == 1){ //if switch high->manual mode else tester mode
            alufn_address = alufnreg.q; 
            states.d = states.INPUTA;}
          else {
            alufn_address = addressreg.q; 
            states.d = states.TEST;}}
        else{
            outputreg.d = in[0][0];
            outputled.d = { 8h14, 8h1, 8hc, 8hc};
            states.d = states.HI; } 
          
//manual mode    
      states.INPUTA:
        if (button[1]) {
          inputa.d[7:0] = in[0]; // dip switch bank 0: first 8 bits
          inputa.d[15:8] = in[1]; // dip switch bank 1: second 8 bits
          states.d = states.INPUTB; // change state
        }
        
        else {
          outputreg.d[7:0] = in[0]; // dip switch bank 0: first 8 bits
          outputreg.d[15:8] = in[1]; // dip switch bank 1: second 8 bits
          outputled.d = {8ha, 8hc, 8hc, 8hc};  // 'A'
          states.d = states.INPUTA;
        }
        
    states.INPUTB:
        if (button[1]) {
          inputb.d[7:0] = in[0]; 
          inputb.d[15:8] = in[1];
          states.d = states.ALUFN;
        }
        
        else {
          outputreg.d[7:0] = in[0]; // dip switch bank 0: first 8 bits
          outputreg.d[15:8] = in[1]; // dip switch bank 1: second 8 bits
          outputled.d = {8hb, 8hc, 8hc, 8hc};  // 'b'
          states.d = states.INPUTB;
        }    
        
    states.ALUFN:
      alufn_address = alufnreg.q;
      alufnreg.d = in[0][5:0];
      if (button[1]) {
        
        if (alufnreg.q == ADD||alufnreg.q == SUB || alufnreg.q == MUL||alufnreg.q == AND||alufnreg.q == OR||alufnreg.q == XOR||alufnreg.q == A||alufnreg.q == SHL||alufnreg.q == SHR||alufnreg.q == SRA ||alufnreg.q == CMPEQ||alufnreg.q == CMPLT||alufnreg.q == CMPLE ||alufnreg.q == MOD){
          states.d = states.RESULT; 
          }  
      else{
            states.d = states.ALUX;
        }
      }
      else {
        outputreg.d = in[0][5:0]; // dip switch bank 0: first 5 bits
        outputled.d = {8h0, 8hd, 8hc, 8hc};  
        states.d = states.ALUFN;
      }
        
      states.ALUX:
      alufn_address = alufnreg.q;
      if (button[1]){
          states.d=states.ALUFN;}
      
      else{
        outputled.d={8he,8he,8he,8he}; 
        states.d=states.ALUX;}
        
    states.RESULT:
        alufn_address = alufnreg.q;
        if (button[1]) { 
          inputa.d = 0;
          inputb.d = 0;
          alufnreg.d = 0;
          z.d = 0;
          v.d = 0;
          n.d = 0;
          states.d = states.HI;
        }
        
        else { 
            outputreg.d = alu.out;
            outputled.d[3] = 8hc;
            outputled.d[2] = z.q;
            outputled.d[1] = v.q;
            outputled.d[0] = n.q;
            states.d = states.RESULT;
        }

//tester mode    
      states.TEST:
        addressreg.d = 6b000000;
        if(slowClockEdge.out == b1){ //wait for slow down clock for state change
          states.d = states.SHOWA;}
        else{
          outputled.d = {8h12, 8he, 8h11, 8h12}; //tESt
          states.d = states.TEST;}
          
      states.NEXT:
        alufn_address = alufnreg.q;
        if($unsigned(addressreg.q) <= $unsigned(6b001101)){ //check if address less than or equal to last address
          if(outputled.q[3] == 8hf){ 
            states.d=states.FAIL;}
          else{
            addressreg.d = addressreg.q+6b000001; //move to next address and load corresponding values
            states.d = states.SHOWA;}} //if it is continue the check process
        else{
          states.d = states.PASS;} //else all test cases have been checked and have passed

      states.SHOWA:
        alufn_address = addressreg.q; //display test case address     
        if(slowClockEdge.out == b1){ //wait for slow down clock for state change
          states.d = states.SHOWB;}
        else{
          outputled.d = {8ha, 8hc, 8hc, 8hc}; //A
          outputreg.d=rom.inputa;
          states.d = states.SHOWA;} 
        
    states.SHOWB:
    alufn_address = addressreg.q; //display test case address    
      if(slowClockEdge.out == b1){ //wait for slow down clock for state change
        states.d = states.SHOWALUFN;}
      else{
        outputled.d = {8hb, 8hc, 8hc, 8hc}; //B 
        outputreg.d = rom.inputb;
        states.d = states.SHOWB;}
    
    states.SHOWALUFN:
    alufn_address = addressreg.q;//display test case address   
      if(slowClockEdge.out == b1){ //wait for slow down clock for state change
        states.d = states.CHECK;}
      else{
        outputled.d = {8h0, 8hd, 8hc, 8hc}; //OP 
        outputreg.d = 0;
        outputreg.d[5:0] = rom.alufn; }
      
    states.CHECK:
    alufn_address = addressreg.q; //display test case address
      if(slowClockEdge.out == b1){ //wait for slow down clock for state change
          states.d = states.NEXT;}
      else{
        alu.a = rom.inputa;
        alu.b = rom.inputb;
        alu.alufn_signal = rom.alufn;
        //display computed output
        outputreg.d = alu.out;
        if(in[2][7] == 1){ //manipulate output by inverting MSB
        outputreg.d[14:0] = alu.out[14:0];
        outputreg.d[15] = ~alu.out[15];}                            
        outputled.d[2] = alu.n[0]; 
        outputled.d[1] = alu.v[0];
        outputled.d[0] = alu.z[0];  
                       
        //check_condition
        if(outputreg.q == rom.romvalue){
          outputled.d[3] = 8hd;} //P -- "passed taste case"
        else{
          outputled.d[3] = 8hf;} //F -- "failed test case"          
        states.d = states.CHECK;}         
                                          
      states.PASS:
        alufn_address = addressreg.q;
        if(button[1]){
          addressreg.d=0;
          states.d=states.HI;}
        else{
          outputled.d = { 8hd, 8ha, 8h11, 8h11}; //PASS
          states.d = states.PASS;}        
                 
      states.FAIL:
        alufn_address = addressreg.q;
        if(button[1]){
          states.d = states.HI;}
        else{
          outputled.d = {8hf, 8ha, 8h1, 8h10}; //FAIL 
          states.d = states.FAIL; }
                        